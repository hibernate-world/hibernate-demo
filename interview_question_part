1. What is Dialect?
Hibernate is database independent ORM tool. You can use any of the supported database with Hibernate.
dialects are the classes specific to a database and it generates the query for that database.
2. Where you write configuration detail?
hibernate-cfg.xml
3. What is HQL? Have you ever used HQL in your project?
Hibernate uses HQL (Hibernate Query Language), which is similar to SQL, but Hibernate’s HQL provides full support for polymorphic queries. HQL understands object-oriented concepts like inheritance, polymorphism, and association.
Yes at DAO Level
4. How to use L2 cache? 
step1:activate set property in hibernate-config.xml
step2:set property ecache.xml file
step3:inside set all property file in ecache.xml
step4:read ecache file from hibernateseesion factory
5. Difference between l1 and l2 cache and where they are associate?
first level cache is shareable
First Level Cache: Hibernate first level cache is associated with the Session object. Hibernate first level cache is enabled by default and there is no way to disable it. However hibernate provides methods through which we can delete selected objects from the cache or clear the cache completely.
Any object cached in a session will not be visible to other sessions and when the session is closed, all the cached objects will also be lost.
Second Level Cache: Hibernate Second Level cache is disabled by default but we can enable it through configuration. Currently EHCache and Infinispan provides implementation for Hibernate Second level cache and we can use them. We will look into this in the next tutorial for hibernate caching.
Query Cache: Hibernate can also cache result set of a query. Hibernate Query Cache doesn’t cache the state of the actual entities in the cache; it caches only identifier values and results of value type. So it should always be used in conjunction with the second-level cache
6. Difference between merge and update?
Update():- if you are sure that the session does not contains an already persistent instance with the same identifier,then use update to save the data in hibernate 
Merge():-if you want to save your modificatiions at any time with out knowing abot the state of an session, then use merge() in hibernate.
Merge: suppose we create a session and load an object. Now object in session cache. If we close the session at this point and we edit state of object and tried to save using update() it will throw exception. To make object persistent we need to open another session. Now we load same object again in current session. So if we want to update present object with previous object changes we have to use merge() method. Merge method will merge changes of both states of object and will save in database. 
Update: If we are dealing with any object in same session we should use update() or saveOrUpdate() method. 
5. What is the use of @Transaction.
I think transactions belong on the Service layer. It's the one that knows about units of work and use cases. It's the right answer if you have several DAOs injected into a Service that need to work together in a single transaction.
ACID properties of transactions
ACID Properties. A transaction is a very small unit of a program and it may contain several lowlevel tasks. A transaction in a database system must maintain Atomicity, Consistency, Isolation, and Durability − commonly known as ACID properties − in order to ensure accuracy, completeness, and data integrity.
